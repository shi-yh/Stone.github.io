<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>60分钟复刻系列:黄金矿工</title>
    <url>/undefined/4fa1fb85.html</url>
    <content><![CDATA[<p>刷题刷的有点累了，但是上次的蜘蛛纸牌有点难（小声BB），所以打算重新开一个小坑。</p>
<h2 id="最终成品需求："><a href="#最终成品需求：" class="headerlink" title="最终成品需求："></a>最终成品需求：</h2><h3 id="矿工："><a href="#矿工：" class="headerlink" title="矿工："></a>矿工：</h3><ul>
<li>力量：力量决定了矿工拉动物品的速度。</li>
<li>运气：运气决定了矿工获得随机袋子时得到的东西。</li>
<li>专精：物品的最终价值会加上矿工的专精。</li>
<li>炸弹：炸弹可以摧毁当前在拉动的物品。</li>
</ul>
<h3 id="物品："><a href="#物品：" class="headerlink" title="物品："></a>物品：</h3><ul>
<li>重量：物品的重量。</li>
<li>价值：物品的价值。</li>
<li>速度：决定了物品是否会移动。</li>
<li>图片：显示在界面上的图片。</li>
<li>爆炸半径：当被触碰时会摧毁的范围</li>
</ul>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>关于C#正则表达式的学习</title>
    <url>/undefined/9a6d0600.html</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>随着游戏开发的逐渐推进，验证玩家输入文本的功能也逐渐被提上日程，诸如验证密码格式，验证邮箱格式，以及屏蔽敏感词汇都需要基于这项功能。而实现这项功能的基础，就是正则表达式。因为之前对这块都是一知半解的程度，所以参考一些现成的博客，尝试对这个功能进行一定的梳理。</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>在获得到一个字符串后，以现有的规则进行匹配，返回匹配的结果。</li>
<li>在获得到一个字符串后，根据现有的规则替换相应文本</li>
</ul>
<p>而规则，最终就是一个正则表达式。</p>
<h2 id="正则表达式的匹配规则"><a href="#正则表达式的匹配规则" class="headerlink" title="正则表达式的匹配规则"></a>正则表达式的匹配规则</h2><p>菜鸟教程和很多的博文都习惯于先介绍一堆规则，然后下面有一堆例子，让我在学习的时候很头痛，所以我自己写的时候打算换一下顺序。</p>
<p>以下例子主要参考<a href="https://www.cnblogs.com/caokai520/p/4511848.html">C# 正则表达式</a>这篇文章，十分感谢原作者。</p>
<h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">		    </span><br><span class="line"><span class="built_in">string</span> RegexStr = <span class="built_in">string</span>.Empty;</span><br><span class="line">            RegexStr = <span class="string">&quot;[0-9]&quot;</span>;  </span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;1&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;1&quot;</span>, RegexStr));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;1111&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;1111&quot;</span>, RegexStr));</span><br><span class="line"></span><br><span class="line">            RegexStr = <span class="string">&quot;[0-9]+&quot;</span>;  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;1&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;1&quot;</span>, RegexStr));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;1111&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;11111&quot;</span>, RegexStr));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;R1111&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;R11111&quot;</span>, RegexStr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            RegexStr = <span class="string">&quot;^[0-9]+&quot;</span>; </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;1&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;1&quot;</span>, RegexStr));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;1111&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;11111&quot;</span>, RegexStr));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;R1111&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;R11111&quot;</span>, RegexStr));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;11R11&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;11R111&quot;</span>, RegexStr));</span><br><span class="line"></span><br><span class="line">            RegexStr = <span class="string">&quot;^[0-9]+$&quot;</span>;  <span class="comment">//匹配字符串的开始和结束是否为0-9的数字[定位字符]</span></span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;1&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;1&quot;</span>, RegexStr));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;1111&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;11111&quot;</span>, RegexStr));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;R1111&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;R11111&quot;</span>, RegexStr));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;判断&#x27;11R11&#x27;是否为符合:&#123;0&#125;&quot;</span>, Regex.IsMatch(<span class="string">&quot;11R111&quot;</span>, RegexStr));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个例子中使用了 *”^[0-9]+$”*作为匹配规则。</p>
]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity协程的原理和实现</title>
    <url>/undefined/14200c38.html</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近在工作中尝试使用IL作为项目热更方案，但是使用IL后，游戏中大部分的类都不能再继承Mono，也就是无法使用协程。</p>
<p>尽管有一个简单的方案是，从主项目中传递一个MonoBehavior给热更项目作为总协程，但是和使用主项目的Update执行热更Update的方法一样，这样调用总是会有相应的性能消耗的，所以尝试在热更项目中内置一个协程。</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>先进行需求拆分，Unity的协程主要需要实现以下功能：</p>
<ol>
<li>当前帧代码逻辑仅执行到yield return 之前的语句。</li>
<li>等待既定间隔</li>
</ol>
<p>在实现我们需要了解一下C#的迭代器，解释起来需要的篇幅有些长，具体可以参考<a href="https://www.cnblogs.com/wilber2013/p/4299529.html">C#迭代器</a>。</p>
<p>首先我们来实现第一个需求，我们设计如下一个迭代器。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function">IEnumerator <span class="title">TestCoroutine</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line">            a += <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> a;<span class="comment"><span class="doctag">///</span>id=0</span></span><br><span class="line"></span><br><span class="line">            a -= <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> a;<span class="comment">//id=1</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="string">&quot;计算完成&quot;</span>;<span class="comment">//id=2</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line">            a =<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>然后再Main函数中尝试执行。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Program pr = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">           IEnumerator e = pr.TestCoroutine();</span><br><span class="line"></span><br><span class="line">           Console.WriteLine(e.Current);</span><br><span class="line"></span><br><span class="line">           e.MoveNext();</span><br><span class="line"></span><br><span class="line">           Console.WriteLine(e.Current);</span><br><span class="line"></span><br><span class="line">           e.MoveNext();</span><br><span class="line"></span><br><span class="line">           Console.WriteLine(e.Current);</span><br><span class="line"></span><br><span class="line">           e.MoveNext();</span><br><span class="line"></span><br><span class="line">           Console.WriteLine(e.Current);</span><br><span class="line"></span><br><span class="line">           e.MoveNext();</span><br><span class="line"></span><br><span class="line">           e.MoveNext();</span><br><span class="line"></span><br><span class="line">           Console.WriteLine(e.Current);</span><br><span class="line"></span><br><span class="line">           Console.ReadLine();</span><br></pre></td></tr></table></figure>

<p>此处代码使用线性展示让运行过程更为直观。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/shi-yh/shiyh-imgs/images/20210224162610.png" alt="img"></p>
<p>现在第一个需求已经实现了，我们先将刚才的一大串函数提取StartCoroutine函数，这样看起来是不是就和Unity一样呢？</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           Program pr = <span class="keyword">new</span> Program();</span><br><span class="line"></span><br><span class="line">           StartCoroutine(pr.TestCoroutine());</span><br><span class="line"></span><br><span class="line">           Console.ReadLine();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StartCoroutine</span>(<span class="params">IEnumerator e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (e.MoveNext())</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(e.Current);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们尝试将原先yield return的值的意义改为时间，即如果我执行 yield return 1，代表我要过1s后才会执行下一个yield。</p>
<p>那不是只要这样写就可以了嘛！</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StartCoroutine</span>(<span class="params">IEnumerator e</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="built_in">float</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span> (e.MoveNext())</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">object</span> obj = e.Current;</span><br><span class="line"></span><br><span class="line">               time = (<span class="built_in">float</span>)(e.Current);</span><br><span class="line"></span><br><span class="line">               Console.WriteLine(DateTime.Now.ToString());</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (time&gt;<span class="number">0</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   Thread.Sleep((<span class="built_in">int</span>)(time * <span class="number">1000</span>));</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               Console.WriteLine(DateTime.Now.ToString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jsdelivr.net/gh/shi-yh/shiyh-imgs/images/20210224171439.jpg" alt="u=2011381588,2063254748&fm=26&gp=0" style="zoom:50%;" />

<p>显然不是的。</p>
<p>按照这个写法，如果我yield return 100，那我游戏不是要卡死一百秒嘛，Unity又不推荐使用多线程，这可怎么办呢？</p>
<p>显然StartCoroutine不是这样实现的，但是我们可以从结果来猜测一下执行这个函数后究竟发生了什么。</p>
<p>首先我们能看到StartCoroutine函数的声明是这样的。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Coroutine <span class="title">StartCoroutine</span>(<span class="params">IEnumerator routine</span>)</span></span><br></pre></td></tr></table></figure>

<p>那我们也先先创建一个类，就叫Coroutine吧。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Coroutine</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> IEnumerator _e;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 执行下一个yield的计时</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> _curTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 移除标记</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> removeMark;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Coroutine</span>(<span class="params">IEnumerator e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _e = e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            removeMark = !_e.MoveNext();</span><br><span class="line"></span><br><span class="line">            _curTime = (<span class="built_in">float</span>)(_e.Current);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>移除标记主要是有考虑到停止协程的需求。</p>
<p>那么现在什么时候该执行协程呢，这时候就需要一个事件系统，在Update每次执行的时候分发消息，而Coroutine类只需要在构造时添加相应监听就可以啦。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Coroutine</span>(<span class="params">IEnumerator e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _e = e;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加对主逻辑时间变化的监听</span></span><br><span class="line"><span class="comment">//EventSystem.AddListener(TimeChangeType.UpDateTimeChange,RegistUpDateFunc)</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RegistUpDateFunc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (removeMark)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _curTime -= Time.DeltaTime;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_curTime&lt;=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在我们只剩下最后一个步骤了，在上述代码中，我们只实现了根据Update的时间变化来处理协程，那么如果我们要根据实际时间来处理呢？</p>
<p>所以_curTime变量的类型并不是float的。</p>
<p>我们先定义一个枚举类，表示游戏中可能用到的几个延时。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> WaitTimeType</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 延迟几帧</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    WaitTimeType_frame,</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 延迟游戏时间的几秒</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    WaitTimeType_time,</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 延迟实际时间的几秒</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    WaitTimeType_realTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后定义WaitTime类。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">WaitTime</span></span><br><span class="line">    &#123;</span><br><span class="line">        WaitTimeType type;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">float</span> time;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WaitTime</span>(<span class="params">WaitTimeType type,<span class="built_in">float</span> time </span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再将之前迭代器的返回值改一改。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function">IEnumerator <span class="title">TestCoroutine</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line">    a += <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitTime</span>(<span class="params"> WaitTimeType.WaitTimeType_time,<span class="number">1</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    a -= <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitTime</span>(<span class="params">WaitTimeType.WaitTimeType_time, <span class="number">2</span></span>)</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line">    a =<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候看起来，就和Unity的协程差不多一样了呢。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/shi-yh/shiyh-imgs/images/20210224180512.jpg" alt="bef3df8agy1fcnwgh60coj208c08c0tf"></p>
<p>好啦本篇到此结束，感谢大家浏览，如果我有什么说的不对的地方欢迎在评论区指出~</p>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>多语言方案</title>
    <url>/undefined/96bf7ba8.html</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>因为项目最开始的时候，资源管理不到位，所以很多资源在制作时都没有约定规范，这就导致了许多需要做多语言支持的资源分布在各个不同的部分，在后期支持多语言的时候十分痛苦，所以写了个小工具，用于一键提取非策划表中的文本（代码和预制体上的文本）。</p>
<h2 id="定于多语言结构"><a href="#定于多语言结构" class="headerlink" title="定于多语言结构"></a>定于多语言结构</h2><p>参考现成主流的多语言方案，我打算使用如下结构来支持多语言。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/shi-yh/shiyh-imgs/images/20210225174953.png" alt="QQ图片20210225172729"></p>
<p>语言包中的所有数据用字典进行存储，比如我们用1001（int作为key，需要多一层策划注释，但是自增索引不容易出错）或者Main_Logo（string作为key，少一层策划注释，但是想key的名字要想很久）作为主界面的logo的key，然后对应我们最终需要的Value。</p>
<h2 id="提取代码中的文本"><a href="#提取代码中的文本" class="headerlink" title="提取代码中的文本"></a>提取代码中的文本</h2><p>在开发过程中，有一部分游戏中用到的提示文本是临时写在代码里的（这是一个很不好的习惯），如果要一个一个去找出来并且改成从文本库中提取，是一件需要大量重复劳动的事，所以我打算做一个提取替换的工具。</p>
<p>先分析一下需求：</p>
<ul>
<li>找到代码中的所有包含【引号+中文+引号】的部分。</li>
<li>将找到的部分提取到一个临时字典中，并生成一个value将此部分替换。</li>
</ul>
<p>首先我们来实现第一个需求，这时候就要用到正则表达式来提取。</p>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让NPC更为生动</title>
    <url>/undefined/d5138eb8.html</url>
    <content><![CDATA[<p>最近沉迷哈迪斯，哈迪斯里有个很有趣的功能是，你每次回到冥界神殿，NPC都会根据你当前的状况和你进行不同的对话。想实现一下NPC的个性化功能，一般的逻辑都是这么设计的：</p>
<ul>
<li>玩家身上有一个数据Data</li>
<li>Npc身上有一个数据解析接口ReveiceData</li>
<li>Npc身上有一个行为模式BehaviorData,由策划配置对各个数据的反馈。</li>
</ul>
<p>但是有一天，策划突然想到，我现在希望玩家角色在Npc身边，发送“二营长，你他娘的意大利炮呢？”文本气泡的时候，Npc能给出相应的反馈。</p>
<p>啊这么简单的需求用神经网络嘛，超级好实现的【但是我不会，只能手动打爆策划狗头。</p>
]]></content>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>委托是什么</title>
    <url>/undefined/1525fd0d.html</url>
    <content><![CDATA[<h2 id="委托是什么"><a href="#委托是什么" class="headerlink" title="委托是什么"></a>委托是什么</h2><p>先看网上对于委托的一段的解释。</p>
<p>委托：顾名思义，让别人帮你办件事。委托是C#实现<strong>回调函数</strong>的一种机制。</p>
<p>举个在游戏开发中的例子：角色射出了一发子弹。根据我们常规的认知，当子弹被射出后，子弹和角色就是两个不同的个体。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> 角色类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Shoot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span>射击并生成子弹</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F;&#x2F; 子弹类</span><br><span class="line">&#x2F;&#x2F;&#x2F; </span><br><span class="line">public class Bullet</span><br><span class="line">&#123;</span><br><span class="line">    public void OnHit()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F;子弹命中了敌人</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一天策划突然来找你：Stone啊，我觉得给A加一个被动技能吧，如果子弹命中了，下一次射击的子弹伤害会发生改变。</p>
<p>ok现在我们用最简单的方式，在子弹的脚本里加上子弹创造者（角色A），这样在子弹伤害到敌人的时候，就能通知角色A啦。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F;&#x2F; 角色类</span><br><span class="line">&#x2F;&#x2F;&#x2F; </span><br><span class="line">public class Player</span><br><span class="line">&#123;</span><br><span class="line">    public void OnHit()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; </span><br><span class="line">&#x2F;&#x2F;&#x2F; 子弹类</span><br><span class="line">&#x2F;&#x2F;&#x2F; </span><br><span class="line">public class Bullet</span><br><span class="line">&#123;</span><br><span class="line">    Player pl;</span><br><span class="line"></span><br><span class="line">    public void OnHit()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F;子弹命中了敌人</span><br><span class="line">        pl.OnHit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>子弹类中的全局变量可以访问到Player，这其实造成了一些奇怪的<strong>耦合</strong>，万一有一天Player类消失了，或者Player.OnHit函数被改动了，子弹类就无法运行了。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/shi-yh/shiyh-imgs/images/1.png" alt="img"></p>
</li>
<li><p>如果策划说，其他的逻辑也要和子弹的碰撞挂钩，难道要一个一个加进去吗</p>
</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/shi-yh/shiyh-imgs/images/2.png" alt="img"></p>
<p>这时候我们当然要想一个更好的办法，子弹表示：反正我只管我自己打没打到人，你要是之前跟我说过：<em>“你打到人的时候要告诉我呦”</em>或者”<em>你打不到人要告诉我呦</em>“，我就跟你说，你要是没说，那就拉倒。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Bullet</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; </span><br><span class="line">    &#x2F;&#x2F;&#x2F; 在我结束生命周期的时候，会执行这些</span><br><span class="line">    &#x2F;&#x2F;&#x2F; </span><br><span class="line">    public Action OnBulletEnd;</span><br><span class="line"></span><br><span class="line">    public void OnHit()</span><br><span class="line">    &#123;</span><br><span class="line">        OnBulletEnd?.Invoke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Player</span><br><span class="line">&#123;</span><br><span class="line">    public void Shoot()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;&#x2F;射击并生成子弹</span><br><span class="line">        Bullet bu &#x3D; new Bullet();</span><br><span class="line">        bu.OnBulletEnd +&#x3D; OnHit;</span><br><span class="line">    &#125;</span><br><span class="line">    public void OnHit()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上，就是我对于委托的一些理解。</p>
<h2 id="Event关键字"><a href="#Event关键字" class="headerlink" title="Event关键字"></a>Event关键字</h2><p>有一天，有个新人来改Player的代码，他一不小心把代码改成了下面的样子。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void Shoot()</span><br><span class="line">   &#123;</span><br><span class="line">       &#x2F;&#x2F;&#x2F;射击并生成子弹</span><br><span class="line">       Bullet bu &#x3D; new Bullet();</span><br><span class="line">       bu.OnBulletEnd +&#x3D; OnHit;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;子弹：你在教我做事？</span><br><span class="line">       bu.OnBulletEnd();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jsdelivr.net/gh/shi-yh/shiyh-imgs/images/20200909143807.png" alt="img"></p>
<p>这时候我们就要为事件加上event关键字，保证它只能被自身调用，而不能被外部类调用啦。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public event Action OnBulletEnd;</span><br></pre></td></tr></table></figure>

<p>最后在网上找到一句比较专业的解释：<em>event关键字的作用，用于不公开发布器中委托对象实例，对事件委托对象进行保护，禁止外部调用。</em></p>
<p>OK，这就是本篇的全部内容啦~如果有什么说的不对的地方希望大家在评论区提出，我会及时更正。</p>
]]></content>
      <tags>
        <tag>Unity C#</tag>
      </tags>
  </entry>
</search>
